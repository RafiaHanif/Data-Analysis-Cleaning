{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8615992,"sourceType":"datasetVersion","datasetId":5156898}],"dockerImageVersionId":30732,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-05T18:38:57.443018Z","iopub.execute_input":"2024-06-05T18:38:57.443457Z","iopub.status.idle":"2024-06-05T18:39:00.746652Z","shell.execute_reply.started":"2024-06-05T18:38:57.443421Z","shell.execute_reply":"2024-06-05T18:39:00.745067Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Dataset","metadata":{}},{"cell_type":"markdown","source":"First, I will pull get the program to read the anime.csv and display the headers and top 5 results. ","metadata":{}},{"cell_type":"code","source":"anime =pd.read_csv('/kaggle/input/anime-data/anime.csv')\nanime.head ()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T18:44:43.393033Z","iopub.execute_input":"2024-06-05T18:44:43.393552Z","iopub.status.idle":"2024-06-05T18:44:43.450256Z","shell.execute_reply.started":"2024-06-05T18:44:43.393504Z","shell.execute_reply":"2024-06-05T18:44:43.448771Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"About the animes dataset\n\n* anime_id - myanimelist.net's unique id identifying an anime.\n* name - full name of anime.\n* genre - comma separated list of genres for this anime.\n* type - movie, TV, OVA, etc.\n* episodes - how many episodes in this show. (1 if movie).\n* rating - average rating out of 10 for this anime.\n* members - number of community members that are in this anime's \"group\".\n","metadata":{}},{"cell_type":"markdown","source":"Secondly, I will pull get the program to read the ratings.csv and display the headers and top 5 results. ","metadata":{}},{"cell_type":"code","source":"rating =pd.read_csv('/kaggle/input/anime-data/rating.csv')\nrating.head ()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T18:45:53.995847Z","iopub.execute_input":"2024-06-05T18:45:53.996296Z","iopub.status.idle":"2024-06-05T18:45:57.569027Z","shell.execute_reply.started":"2024-06-05T18:45:53.996258Z","shell.execute_reply":"2024-06-05T18:45:57.567751Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"About the ratings dataset\n\n* user_id - non identifiable randomly generated user id.\n* anime_id - the anime that this user has rated.\n* rating - rating out of 10 this user has assigned (-1 if the user watched it but didn't assign a rating).","metadata":{}},{"cell_type":"markdown","source":"# Data Cleaning\nNow to ensure that the data is ready to use, we want to ensure we get rid of any null values. ","metadata":{}},{"cell_type":"code","source":"print (\"# of NaN values for the anime_id:\", anime[\"anime_id\"].isnull().sum())\nprint (\"# of NaN values for the name:\", anime[\"name\"].isnull().sum())\nprint (\"# of NaN values for the genre:\", anime[\"genre\"].isnull().sum())\nprint (\"# of NaN values for the type:\", anime[\"type\"].isnull().sum())\nprint (\"# of NaN values for the episodes:\", anime[\"episodes\"].isnull().sum())\nprint (\"# of NaN values for the rating:\", anime[\"rating\"].isnull().sum())\nprint (\"# of NaN values for the members:\", anime[\"members\"].isnull().sum())\n","metadata":{"execution":{"iopub.status.busy":"2024-06-05T18:54:52.704768Z","iopub.execute_input":"2024-06-05T18:54:52.705269Z","iopub.status.idle":"2024-06-05T18:54:52.723379Z","shell.execute_reply.started":"2024-06-05T18:54:52.705218Z","shell.execute_reply":"2024-06-05T18:54:52.722142Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"With these results, we know that genre, type and rating has null values. Now we must drop those values to ensure for an accurate analysis. ","metadata":{}},{"cell_type":"code","source":"anime = anime.dropna(subset=['genre', 'type', 'rating'], axis=0)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T18:56:55.840877Z","iopub.execute_input":"2024-06-05T18:56:55.841311Z","iopub.status.idle":"2024-06-05T18:56:55.862546Z","shell.execute_reply.started":"2024-06-05T18:56:55.841267Z","shell.execute_reply":"2024-06-05T18:56:55.861144Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Double-check all null values were dropped correctly.\n","metadata":{}},{"cell_type":"code","source":"print (\"# of NaN values for the genre:\", anime[\"genre\"].isnull().sum())\nprint (\"# of NaN values for the type:\", anime[\"type\"].isnull().sum())\nprint (\"# of NaN values for the rating:\", anime[\"rating\"].isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-06-05T18:57:22.182428Z","iopub.execute_input":"2024-06-05T18:57:22.182851Z","iopub.status.idle":"2024-06-05T18:57:22.195185Z","shell.execute_reply.started":"2024-06-05T18:57:22.182818Z","shell.execute_reply":"2024-06-05T18:57:22.193668Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Getting the general dataframe info. This part will also confirm the NaN values but also help figure out what data type each column is. ","metadata":{}},{"cell_type":"code","source":"anime.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T18:59:15.219273Z","iopub.execute_input":"2024-06-05T18:59:15.219876Z","iopub.status.idle":"2024-06-05T18:59:15.260804Z","shell.execute_reply.started":"2024-06-05T18:59:15.219828Z","shell.execute_reply":"2024-06-05T18:59:15.258666Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"anime.max()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-05T19:06:39.170655Z","iopub.execute_input":"2024-06-05T19:06:39.171058Z","iopub.status.idle":"2024-06-05T19:06:39.191717Z","shell.execute_reply.started":"2024-06-05T19:06:39.171026Z","shell.execute_reply":"2024-06-05T19:06:39.190473Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"anime.min()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T19:06:41.330988Z","iopub.execute_input":"2024-06-05T19:06:41.332268Z","iopub.status.idle":"2024-06-05T19:06:41.352947Z","shell.execute_reply.started":"2024-06-05T19:06:41.332219Z","shell.execute_reply":"2024-06-05T19:06:41.351670Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(anime['rating'].max())\nprint(anime['rating'].min())\nprint(anime['rating'].mean())","metadata":{"execution":{"iopub.status.busy":"2024-06-05T19:08:53.144872Z","iopub.execute_input":"2024-06-05T19:08:53.145338Z","iopub.status.idle":"2024-06-05T19:08:53.154682Z","shell.execute_reply.started":"2024-06-05T19:08:53.145300Z","shell.execute_reply":"2024-06-05T19:08:53.153085Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"anime.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T19:23:31.688468Z","iopub.execute_input":"2024-06-05T19:23:31.688918Z","iopub.status.idle":"2024-06-05T19:23:31.708150Z","shell.execute_reply.started":"2024-06-05T19:23:31.688883Z","shell.execute_reply":"2024-06-05T19:23:31.706859Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}